name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarCloud Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build and Analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd Animalia
          dotnet-sonarscanner begin /k:"edwardapaza_mirror-proyecto-si982-2024-rec-u2-proyectou2_web2_ccalli_apaza" /o:"edwardapaza" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build Animalia.sln --configuration Release
          dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Fetch SonarCloud Metrics and Display
        id: fetch-metrics
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          $SONAR_API_URL = "https://sonarcloud.io/api/measures/component"
          $PROJECT_KEY = "edwardapaza_mirror-proyecto-si982-2024-rec-u2-proyectou2_web2_ccalli_apaza"
          $METRICS = "bugs,vulnerabilities,code_smells"

          # ConstrucciÃ³n de la URL
          $REQUEST_URL = "$SONAR_API_URL?component=$PROJECT_KEY&metricKeys=$METRICS"
          Write-Host "Fetching SonarCloud Metrics from: $REQUEST_URL"

          # Configurar autenticaciÃ³n con SONAR_TOKEN
          $Headers = @{ Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$env:SONAR_TOKEN:")) }

          # Hacer la solicitud
          $RESPONSE = Invoke-RestMethod -Uri $REQUEST_URL -Headers $Headers -Method Get

          # Validar respuesta
          if (!$RESPONSE -or $RESPONSE -match "errors") {
            Write-Host "Error fetching SonarCloud metrics: $RESPONSE"
            exit 1
          }

          Write-Host "SonarCloud API Response: $RESPONSE"
          echo "response=$RESPONSE" >> $GITHUB_ENV

      - name: Publish SonarCloud Metrics as Summary
        shell: pwsh
        run: |
          echo "## ðŸ“Š SonarCloud Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric               | Value   |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "$env:response" | ConvertFrom-Json | Select-Object -ExpandProperty component | Select-Object -ExpandProperty measures | ForEach-Object {
            echo "| $($_.metric) | $($_.value) |" >> $GITHUB_STEP_SUMMARY
          }